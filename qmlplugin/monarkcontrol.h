/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: 
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MONARKCONTROL_H
#define MONARKCONTROL_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface se.unixshell.MonarkControl
 */
class SeUnixshellMonarkControlInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "se.unixshell.MonarkControl"; }

public:
    SeUnixshellMonarkControlInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~SeUnixshellMonarkControlInterface();

    Q_PROPERTY(uchar mode READ mode WRITE setMode)
    inline uchar mode() const
    { return qvariant_cast< uchar >(property("mode")); }
    inline void setMode(uchar value)
    { setProperty("mode", QVariant::fromValue(value)); }

    Q_PROPERTY(double targetKp READ targetKp WRITE setTargetKp)
    inline double targetKp() const
    { return qvariant_cast< double >(property("targetKp")); }
    inline void setTargetKp(double value)
    { setProperty("targetKp", QVariant::fromValue(value)); }

    Q_PROPERTY(ushort targetPower READ targetPower WRITE setTargetPower)
    inline ushort targetPower() const
    { return qvariant_cast< ushort >(property("targetPower")); }
    inline void setTargetPower(ushort value)
    { setProperty("targetPower", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> decGear()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("decGear"), argumentList);
    }

    inline QDBusPendingReply<> decGearLots()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("decGearLots"), argumentList);
    }

    inline QDBusPendingReply<> incGear()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("incGear"), argumentList);
    }

    inline QDBusPendingReply<> incGearLots()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("incGearLots"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void currentCadence(uchar cadence);
    void currentPower(ushort power);
    void modeChanged(uchar mode);
    void targetKpChanged(double kp);
    void targetPowerChanged(ushort power);
};

namespace se {
  namespace unixshell {
    typedef ::SeUnixshellMonarkControlInterface MonarkControl;
  }
}
#endif
